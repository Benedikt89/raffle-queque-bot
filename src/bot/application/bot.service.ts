import { Injectable } from '@nestjs/common';
import TelegramBot from 'node-telegram-bot-api';
import { CommandBus } from '@nestjs/cqrs';
import { UserAntispam } from '@prisma/client';
import {PrismaService} from "../../providers/database/prisma.service";
import {BotCommandsDTO} from "./commands/commands-models/bot-commands.dto";
import {BotStartCommand} from "./commands/bot-start-cmd.handler";
import {nowDateIsAfter} from "../../utils/time-utils";

@Injectable()
export class BotService {
  constructor(
    private readonly commandBus: CommandBus,
    private readonly prisma: PrismaService,
  ) {}

  async sendResponseByBot(dto: {
    botToken: string;
    botId: number;
    body: any;
  }): Promise<void> {
    const { botToken, botId, body } = dto;

    /*
     * –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –≤–µ–±—Ö—É–∫–µ.
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º => –±–æ—Ç –∏–¥–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–µ–±—Ö—É–∫ => –≤–µ–±—Ö—É–∫ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –±–æ—Ç—É
     * –µ—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–æ–±–æ—Ä–æ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ —Ç–æ –±–æ—Ç –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç. —è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª
     * */
    const bot: TelegramBot = new TelegramBot(botToken, { polling: false });

    // –∑–∞–ø—Ä–µ—â–∞–µ—Ç —Å–ø–∞–º–∏—Ç—å —é–∑–µ—Ä–∞–º
    const antispamSystem = async (): Promise<boolean> => {
      const userTgId: number =
        body.message?.from?.id || body.callback_query?.from?.id;

      const foundedUserAntispam: UserAntispam | null =
        await this.prisma.userAntispam.findUnique({
          where: { userTgId: String(userTgId) },
        });

      const updateUserAntispamMessagesAmount = async (
        messagesAmount?: number,
      ): Promise<void> => {
        await this.prisma.userAntispam.update({
          where: { userTgId: String(userTgId) },
          data: {
            messagesAmount: messagesAmount ?? { increment: 1 },
            lastMessageDate: new Date().toString(),
          },
        });
      };

      if (foundedUserAntispam) {
        const userMessagesAmount: number = foundedUserAntispam.messagesAmount;

        const userLastMessageDate: string = foundedUserAntispam.lastMessageDate;

        const nowDateIsAfterLastUserMessageWithOneMinute = nowDateIsAfter(userLastMessageDate);

        // –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ 5 –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–∏–Ω—É—Ç—É
        if (userMessagesAmount > 5) {
          // –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç –ø–æ–∑–∂–µ —á–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ + 1 –º–∏–Ω—É—Ç–∞
          // —Ç–æ –µ—Å—Ç—å –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –º–∏–Ω—É—Ç—É —É–∂–µ –ø—Ä–æ—à–ª–æ
          if (nowDateIsAfterLastUserMessageWithOneMinute) {
            // —é–∑–µ—Ä —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –±–æ—Ç—É —Å–ø—É—Å—Ç—è –º–∏–Ω—É—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updateUserAntispamMessagesAmount(1);

            return true;
          } else {
            // –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–æ —Ç–æ –¥–∞–ª—å—à–µ –∏–≥–Ω–æ—Ä —é–∑–µ—Ä–∞
            return false;
          }
          //   –µ—Å–ª–∏ —é–∑–µ—Ä –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–æ—Ç—É –Ω–æ —É –Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π —É–∂–µ 5
          //   —Ç–æ –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è. –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
          //   —Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏ —ç—Ç–æ 6 –æ–±—Ä–∞—â–µ–Ω–∏–µ —Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –º–∏–Ω—É—Ç—É
        } else if (userMessagesAmount === 5) {
          // –µ—Å–ª–∏ 6 –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          // —Ç–æ –≤—Å–µ –Ω–æ—Ä–º
          if (nowDateIsAfterLastUserMessageWithOneMinute) {
            updateUserAntispamMessagesAmount(1);

            return true;
          } else {
            // –µ—Å–ª–∏ 6 –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –∏–¥–µ—Ç –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            // —Ç–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–∏–Ω—É—Ç—É
            await updateUserAntispamMessagesAmount();

            await bot.sendMessage(
              userTgId,
              `–û—ë—ë–π, –º–Ω–µ –ø—Ä–∏—à–ª–æ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–¥—ã—à–∫–∞ –Ω–∞ 1 –º–∏–Ω—É—Ç—Éüòå`,
            );

            return false;
          }
        } else if (userMessagesAmount < 5) {
          // –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–∞ –º–µ–Ω—å—à–µ 5 –∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          // —Ç–æ –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –Ω–∞—á–∞–ª–æ
          // –µ—Å–ª–∏ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–∏–Ω—É—Ç—É
          if (nowDateIsAfterLastUserMessageWithOneMinute) {
            updateUserAntispamMessagesAmount(1);

            return true;
          }

          updateUserAntispamMessagesAmount();

          return true;
        }
      } else {
        return true;
      }
    };

    const antispamStatus: boolean = await antispamSystem();

    // –µ—Å–ª–∏ –∞–Ω—Ç–∏—Å–ø–∞–º –≤–µ—Ä–Ω—É–ª false –∑–Ω–∞—á–∏—Ç —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    if (!antispamStatus) {
      return;
    }

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    bot.on(
      'text',
      async (
        msg: TelegramBot.Message & {
          // is_premium. —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –±–æ—Ç—É –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–µ–º–∏—É–º
          // –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç true. –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ –ø—Ä–µ–º–∏—É–º–∞ –Ω–µ—Ç —Ç–æ —ç—Ç–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–æ–æ–±—â–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç
          from: TelegramBot.User & { is_premium?: true };
        },
      ): Promise<void> => {
        const chatId: number = msg.from.id;

        const userTextMessage: string = msg.text;
        console.log('=>(bot.service.ts:154) userTextMessage', userTextMessage);

        const botCommandsDTO: BotCommandsDTO = {
          bot,
          botId,
          botWebhookBody: body,
          botWebhookMessage: msg,
        };

        const botCommands = {
          '/start': new BotStartCommand(botCommandsDTO),
        };

        try {
          if (botCommands[userTextMessage]) {
            this.commandBus.execute(botCommands[userTextMessage]);
          } else {
            if (userTextMessage.indexOf('/start') < 0) {
              bot.sendMessage(chatId, `–£–ø—Å... –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüôÑ`);
            }
          }
        } catch (err) {
          console.log('=>(bot.service.ts:173) err', err);
        }
      },
    );

    bot.on(
      'callback_query',
      async (query: TelegramBot.CallbackQuery): Promise<void> => {
        const botInlineBtnsDTO = {
          bot,
          callbackQuery: query,
          botId,
        };

        console.log(botInlineBtnsDTO)
      },
    );

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å processUpdate —Ç–æ –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ–±—Ö—É–∫
    bot.processUpdate(body);
  }
}
